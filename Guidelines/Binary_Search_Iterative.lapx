STATE before
    final_res = []
END_STATE

STATE while
    if_else_count = 0
    res = []
    global final_res
    mid_ele = ""
    #CHECKS FOR WHILE CONDITION
    if ">=" not in ITERATION_CONDITION and "<=" not in ITERATION_CONDITION:
        res.extend([0,1,1,1,1])
        final_res.append(res)
        return
    else:
        res.append(1)
        if ">=" in ITERATION_CONDITION:
            right_pointer = ITERATION_CONDITION[:ITERATION_CONDITION.index(">=")].strip()
            left_pointer = ITERATION_CONDITION[ITERATION_CONDITION.index(">=")+2:].strip()
        else:
            left_pointer = ITERATION_CONDITION[:ITERATION_CONDITION.index("<=")].strip()
            right_pointer = ITERATION_CONDITION[ITERATION_CONDITION.index("<=")+2:].strip()
    
    #CHECKS FOR NUMBER OF IF-ELSE CONDITIONS
    for i in STATEMENTS:
        s = i
        if_else_count+=s.count("else if")+s.count("elif")
        s = s.replace("else if","").replace("elif","")
        if_else_count+=s.count("if")+s.count("else")
    if if_else_count<3:
        res.append(0)
    else:
        res.append(1)

    #CHECK FOR MIDDLE ELEMENT ASSIGNMENT
    flag = False
    for i in STATEMENTS:
        if left_pointer in i and right_pointer in i and ("/ 2" in i or "// 2" in i) and "=" in i:
            temp = i.split(' ').index("=")
            mid_ele = i.split(' ')[temp-1]
            flag = True
            break
    if flag:
        res.append(1)
    else:
        res.append(0)


    #CHECKS FOR IF-ELSE CONDITIONS
    c = 0
    k = []
    for i in condition_list[1:]:
        l = []
        if "==" in i:
            k.append("==")
        if " < " in i:
            k.append("<")
        if " > " in i:
            k.append(">")
    if k.count("==") == 1:
        c+=1
    if k.count(">") == 1:
        c+=1
    if k.count("<") == 1:
        c+=1
    if c>=2:
        res.append(1)
    else:
        res.append(0)

    #CHECK FOR MID ELEMENT INSIDE IF #doesnt work at all times (not required)
    for EXP_STMT in EXP_STATEMENTS_INSIDE_ALL_IF:  
        if mid_ele not in "".join(EXP_STMT):
            res.append(0)
            break
    if len(res)==4:
        res.append(1)
    final_res.append(res)

END_STATE

STATE after
    for res in final_res:
        isbinarysearch = 1
        for i in res:
            if not i:
                isbinarysearch = 0
        if isbinarysearch:
            exit(0)
    if not len(final_res):
        print("Binary Search not implemented")
        return
    res = final_res[0]
    for i in range(len(res)):
        if not res[i]:
            if i==0:
                print("Please use >= or <= in the while loop condition while implementing binary search")
            if i==1:
                print("One or more missing if-else statement")
            if i==2:
               print("Middle element assignment not found inside while loop")
            if i==3:
                 print("If else conditions are incorrect")
            if i==4:
                print("Left and right pointers in binary search not incremented accordingly")
END_STATE